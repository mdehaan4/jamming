{"ast":null,"code":"const clientId = 'a7e8efd0f791462ebadff4357e4a021e'; // Replace with your Spotify client ID\nconst redirectUri = 'http://localhost:3000'; // Your redirect URI\nlet accessToken;\nlet userId;\nconst Spotify = {\n  // Function to retrieve access token\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n    const urlParams = new URLSearchParams(window.location.hash.replace('#', '?'));\n    const token = urlParams.get('access_token');\n    const expiresIn = urlParams.get('expires_in');\n    if (token) {\n      accessToken = token;\n      window.setTimeout(() => accessToken = '', expiresIn * 1000); // Clear token after expiration\n      window.history.pushState('Access Token', null, '/'); // Clean the URL\n      return accessToken;\n    } else {\n      // If no token, redirect to Spotify authorization\n      const authUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public,playlist-modify-private&redirect_uri=${redirectUri}`;\n      window.location = authUrl;\n    }\n  },\n  // Function to get user information\n  getUserInfo() {\n    const token = this.getAccessToken();\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to fetch user info');\n      }\n      return response.json();\n    }).then(data => {\n      userId = data.id; // Set userId from fetched data\n      return data; // Return the data\n    }).catch(error => {\n      console.error('Error fetching user info:', error);\n      throw error;\n    });\n  },\n  // Function to search for tracks\n  search(term) {\n    const token = this.getAccessToken();\n    if (!token) {\n      console.error('No access token found.');\n      return Promise.reject('No access token found.');\n    }\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${encodeURIComponent(term)}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to fetch search results');\n      }\n      return response.json();\n    }).then(data => {\n      // Map and return the required track details\n      return data.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        // Assuming the first artist is the main one\n        album: track.album.name,\n        uri: track.uri\n      }));\n    }).catch(error => {\n      console.error('Error searching for tracks:', error);\n      throw error;\n    });\n  },\n  // Function to save a playlist\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      console.error('Playlist name or track URIs missing.');\n      return Promise.reject('Playlist name or track URIs missing.');\n    }\n    const token = this.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    };\n\n    // Create a new playlist\n    return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify({\n        name: name,\n        public: false\n      }) // Change to 'true' if you want it to be public\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to create playlist');\n      }\n      return response.json();\n    }).then(data => {\n      const playlistId = data.id;\n      // Add tracks to the new playlist\n      return fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify({\n          uris: trackUris\n        })\n      });\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to add tracks to playlist');\n      }\n      console.log('Tracks added to playlist successfully.');\n    }).catch(error => {\n      console.error('Error saving playlist:', error);\n      throw error;\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","userId","Spotify","getAccessToken","urlParams","URLSearchParams","window","location","hash","replace","token","get","expiresIn","setTimeout","history","pushState","authUrl","getUserInfo","fetch","headers","Authorization","then","response","ok","Error","json","data","id","catch","error","console","search","term","Promise","reject","encodeURIComponent","tracks","items","map","track","name","artist","artists","album","uri","savePlaylist","trackUris","length","method","body","JSON","stringify","public","playlistId","uris","log"],"sources":["C:/Users/Matthew De Haan/jamming/src/Spotify.js"],"sourcesContent":["const clientId = 'a7e8efd0f791462ebadff4357e4a021e'; // Replace with your Spotify client ID\r\nconst redirectUri = 'http://localhost:3000'; // Your redirect URI\r\nlet accessToken;\r\nlet userId;\r\n\r\nconst Spotify = {\r\n  // Function to retrieve access token\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n\r\n    const urlParams = new URLSearchParams(window.location.hash.replace('#', '?'));\r\n    const token = urlParams.get('access_token');\r\n    const expiresIn = urlParams.get('expires_in');\r\n\r\n    if (token) {\r\n      accessToken = token;\r\n      window.setTimeout(() => (accessToken = ''), expiresIn * 1000); // Clear token after expiration\r\n      window.history.pushState('Access Token', null, '/'); // Clean the URL\r\n      return accessToken;\r\n    } else {\r\n      // If no token, redirect to Spotify authorization\r\n      const authUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public,playlist-modify-private&redirect_uri=${redirectUri}`;\r\n      window.location = authUrl;\r\n    }\r\n  },\r\n\r\n  // Function to get user information\r\n  getUserInfo() {\r\n    const token = this.getAccessToken();\r\n    return fetch('https://api.spotify.com/v1/me', {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    })\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch user info');\r\n      }\r\n      return response.json();\r\n    })\r\n    .then(data => {\r\n      userId = data.id; // Set userId from fetched data\r\n      return data; // Return the data\r\n    })\r\n    .catch(error => {\r\n      console.error('Error fetching user info:', error);\r\n      throw error;\r\n    });\r\n  },\r\n\r\n  // Function to search for tracks\r\n  search(term) {\r\n    const token = this.getAccessToken();\r\n    if (!token) {\r\n      console.error('No access token found.');\r\n      return Promise.reject('No access token found.');\r\n    }\r\n\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${encodeURIComponent(term)}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    })\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch search results');\r\n      }\r\n      return response.json();\r\n    })\r\n    .then(data => {\r\n      // Map and return the required track details\r\n      return data.tracks.items.map(track => ({\r\n        id: track.id,\r\n        name: track.name,\r\n        artist: track.artists[0].name, // Assuming the first artist is the main one\r\n        album: track.album.name,\r\n        uri: track.uri,\r\n      }));\r\n    })\r\n    .catch(error => {\r\n      console.error('Error searching for tracks:', error);\r\n      throw error;\r\n    });\r\n  },\r\n\r\n  // Function to save a playlist\r\n  savePlaylist(name, trackUris) {\r\n    if (!name || !trackUris.length) {\r\n      console.error('Playlist name or track URIs missing.');\r\n      return Promise.reject('Playlist name or track URIs missing.');\r\n    }\r\n\r\n    const token = this.getAccessToken();\r\n    const headers = {\r\n      Authorization: `Bearer ${token}`,\r\n      'Content-Type': 'application/json',\r\n    };\r\n\r\n    // Create a new playlist\r\n    return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n      method: 'POST',\r\n      headers: headers,\r\n      body: JSON.stringify({ name: name, public: false }), // Change to 'true' if you want it to be public\r\n    })\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        throw new Error('Failed to create playlist');\r\n      }\r\n      return response.json();\r\n    })\r\n    .then(data => {\r\n      const playlistId = data.id;\r\n      // Add tracks to the new playlist\r\n      return fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\r\n        method: 'POST',\r\n        headers: headers,\r\n        body: JSON.stringify({ uris: trackUris }),\r\n      });\r\n    })\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        throw new Error('Failed to add tracks to playlist');\r\n      }\r\n      console.log('Tracks added to playlist successfully.');\r\n    })\r\n    .catch(error => {\r\n      console.error('Error saving playlist:', error);\r\n      throw error;\r\n    });\r\n  }\r\n};\r\n\r\nexport default Spotify;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}